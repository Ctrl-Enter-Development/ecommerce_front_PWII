// ==== lib/main.dart ====
// main.dart
import 'package:ecommerce_front/controllers/category_controller.dart';
import 'package:ecommerce_front/controllers/login_controller.dart';
import 'package:ecommerce_front/controllers/role_controller.dart';
import 'package:ecommerce_front/controllers/subcategory_controller.dart';
import 'package:ecommerce_front/controllers/user_controller.dart';
import 'package:ecommerce_front/screens/login_screen.dart';
import 'controllers/auth_controller.dart'; 
import 'controllers/cart_controller.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:get_storage/get_storage.dart'; 
import 'controllers/product_controller.dart';

void main() async {
  await GetStorage.init();

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(
            create: (_) =>
                ProductController()), 
        ChangeNotifierProvider(create: (_) => CategoryController()),
        ChangeNotifierProvider(create: (_) => SubCategoryController()),
        ChangeNotifierProvider(create: (_) => ProductController()),
        ChangeNotifierProvider(create: (_) => RoleController()),
        ChangeNotifierProvider(create: (_) => UserController()),
        ChangeNotifierProvider(create: (_) => LoginController()),
        ChangeNotifierProvider(create: (_) => AuthController()),
        ChangeNotifierProvider(create: (_) => CartController()),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  static final GlobalKey<NavigatorState> navigatorKey =
      GlobalKey<NavigatorState>();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'Product App',
      theme: ThemeData(
        primarySwatch: Colors.blue, 
      ),
      home: LoginScreen(), 
    );
  }
}


// ==== lib/utils/app_storage.dart ====
import 'package:get_storage/get_storage.dart';

class AppStorage {
  AppStorage._internal();

  static final AppStorage instance = AppStorage._internal();

  factory AppStorage() => instance;

  static const String tokenKey = 'authToken';

  final GetStorage storage = GetStorage();

  String? get token => storage.read(tokenKey);

  void setToken(String? token) =>
      token == null ? storage.remove(tokenKey) : storage.write(tokenKey, token);

  void removeToken() {
    storage.remove(tokenKey);
  }
}

// ==== lib/repositories/login_repository.dart ====
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:ecommerce_front/utils/app_storage.dart';

class LoginRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<bool> login(String username, String password) async {
    try {
      final url = Uri.parse('$_baseUrl/auth/login');
      final body = jsonEncode({
        "userName": username,
        "password": password,
      });

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: body,
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['authToken'] != null) {
          AppStorage.instance.setToken(data['authToken']);
          return true;
        }
      } else {
        print("Erro no login: ${response.statusCode} ${response.body}");
      }
    } catch (e) {
      print("Erro ao realizar login: $e");
    }
    return false;
  }
}

// ==== lib/repositories/category_repository.dart ====
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:ecommerce_front/utils/app_storage.dart';
import '../models/category.dart';

class CategoryRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<List<Category>> fetchCategories() async {
    final url = Uri.parse('$_baseUrl/category_repository');
    final token = AppStorage.instance.token;
    final response = await http.get(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode == 200) {
      final List data = jsonDecode(response.body);
      return data.map((json) => Category.fromJson(json)).toList();
    }
    throw Exception("Erro ao buscar categorias");
  }

  Future<Category> createCategory(Category category) async {
    final url = Uri.parse('$_baseUrl/category_repository');
    final token = AppStorage.instance.token;
    final response = await http.post(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode({
        "name": category.name,
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return Category.fromJson(data);
    }
    throw Exception("Erro ao criar categoria");
  }

  Future<void> deleteCategory(int id) async {
    final url = Uri.parse('$_baseUrl/category_repository/$id');
    final token = AppStorage.instance.token;
    final response = await http.delete(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode != 200) {
      throw Exception("Erro ao deletar categoria");
    }
  }
}

// ==== lib/repositories/role_repository.dart ====
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:ecommerce_front/utils/app_storage.dart';
import '../models/role.dart';

class RoleRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<List<Role>> fetchRoles() async {
    final url = Uri.parse('$_baseUrl/role_repository');
    final token = AppStorage.instance.token;
    final response = await http.get(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode == 200) {
      final List data = jsonDecode(response.body);
      return data.map((json) => Role.fromJson(json)).toList();
    }
    throw Exception("Erro ao buscar perfis");
  }

  Future<Role> createRole(Role role) async {
    final url = Uri.parse('$_baseUrl/role_repository');
    final token = AppStorage.instance.token;
    final response = await http.post(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode({
        "name": role.name,
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return Role.fromJson(data);
    }
    throw Exception("Erro ao criar perfil");
  }

  Future<void> deleteRole(int id) async {
    final url = Uri.parse('$_baseUrl/role_repository/$id');
    final token = AppStorage.instance.token;
    final response = await http.delete(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode != 200) {
      throw Exception("Erro ao deletar perfil");
    }
  }
}

// ==== lib/repositories/subcategory_repository.dart ====
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:ecommerce_front/utils/app_storage.dart';
import '../models/subcategory.dart';

class SubCategoryRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<List<SubCategory>> fetchSubCategories() async {
    final url = Uri.parse('$_baseUrl/sub_category_repository');
    final token = AppStorage.instance.token;
    final response = await http.get(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode == 200) {
      final List data = jsonDecode(response.body);
      return data.map((json) => SubCategory.fromJson(json)).toList();
    }
    throw Exception("Erro ao buscar subcategorias");
  }

  Future<SubCategory> createSubCategory(SubCategory subCategory) async {
    final url = Uri.parse('$_baseUrl/sub_category_repository');
    final token = AppStorage.instance.token;
    final response = await http.post(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode({
        "name": subCategory.name,
        "categoryId": subCategory.categoryId,
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return SubCategory.fromJson(data);
    }
    throw Exception("Erro ao criar subcategoria");
  }

  Future<void> deleteSubCategory(int id) async {
    final url = Uri.parse('$_baseUrl/sub_category_repository/$id');
    final token = AppStorage.instance.token;
    final response = await http.delete(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode != 200) {
      throw Exception("Erro ao deletar subcategoria");
    }
  }
}

// ==== lib/repositories/user_repository.dart ====
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:ecommerce_front/utils/app_storage.dart';
import '../models/user.dart';

class UserRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<List<User>> fetchUsers() async {
    final url = Uri.parse('$_baseUrl/user_repository');
    final token = AppStorage.instance.token;
    final response = await http.get(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode == 200) {
      final List data = jsonDecode(response.body);
      return data.map((json) => User.fromJson(json)).toList();
    }
    throw Exception("Erro ao buscar usu√°rios");
  }

  Future<User> createUser(User user) async {
    final url = Uri.parse('$_baseUrl/user_repository');
    final token = AppStorage.instance.token;
    final response = await http.post(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode({
        "userName": user.userName,
        "password": user.password,
        "roleId": user.roleId,
        "role": user.role,
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return User.fromJson(data);
    }
    throw Exception("Erro ao criar usu√°rio");
  }

  Future<void> deleteUser(int id) async {
    final url = Uri.parse('$_baseUrl/user_repository/$id');
    final token = AppStorage.instance.token;
    final response = await http.delete(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
    );

    if (response.statusCode != 200) {
      throw Exception("Erro ao deletar usu√°rio");
    }
  }
}

// ==== lib/repositories/product_repository.dart ====
// lib/repositories/product_repository.dart
import 'dart:convert';
import 'dart:typed_data'; // Import necess√°rio para Uint8List
import 'package:http/http.dart' as http;
import 'package:ecommerce_front/utils/app_storage.dart';
import '../models/product.dart';

class ProductRepository {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<List<Product>> fetchProducts() async {
    final url = Uri.parse('$_baseUrl/product_repository');
    final token = AppStorage.instance.token;
    final response = await http.get(url, headers: {
      "Content-Type": "application/json",
      "Authorization": "Bearer $token",
    });
    if (response.statusCode == 200) {
      final List data = jsonDecode(response.body);
      return data.map((json) => Product.fromJson(json)).toList();
    }
    throw Exception("Erro ao buscar produtos");
  }

Future<Product> createProduct(Product product, {Uint8List? fileBytes, String? fileName}) async {
  final uri = Uri.parse('$_baseUrl/product_repository'); 
  final token = AppStorage.instance.token;
  final request = http.MultipartRequest("POST", uri);
  request.headers['Authorization'] = "Bearer $token";

  request.fields['name'] = product.name;
  request.fields['price'] = product.price.toString();
  request.fields['subCategoryId'] = product.subCategoryId.toString();
  request.fields['subCategory'] = product.subCategory;
  request.fields['description'] = product.description;

  if (fileBytes != null && fileName != null) {
    request.files.add(
      http.MultipartFile.fromBytes(
        'url', 
        fileBytes,
        filename: fileName,
      ),
    );
  } else {
 
    request.fields['url'] = "";
  }

  final streamedResponse = await request.send();
  final response = await http.Response.fromStream(streamedResponse);

  if (response.statusCode == 200) {
    final data = jsonDecode(response.body);
    return Product.fromJson(data);
  }
  throw Exception("Erro ao criar produto");
}


  Future<void> deleteProduct(int id) async {
    final url = Uri.parse('$_baseUrl/product_repository/$id');
    final token = AppStorage.instance.token;
    final response = await http.delete(url, headers: {
      "Content-Type": "application/json",
      "Authorization": "Bearer $token",
    });
    if (response.statusCode != 200) {
      throw Exception("Erro ao deletar produto");
    }
  }
}

// ==== lib/models/product.dart ====
// lib/models/product.dart
import 'subcategory.dart';

class ProductImage {
  final String access;
  final String path;
  final String name;
  final String type;
  final int size;
  final String mime;
  final Map<String, dynamic>? meta;
  final String url; 

  ProductImage({
    required this.access,
    required this.path,
    required this.name,
    required this.type,
    required this.size,
    required this.mime,
    required this.meta,
    required this.url,
  });

  factory ProductImage.fromJson(Map<String, dynamic> json) {
    return ProductImage(
      access: json['access'] as String,
      path: json['path'] as String,
      name: json['name'] as String,
      type: json['type'] as String,
      size: json['size'] as int,
      mime: json['mime'] as String,
      meta: json['meta'] as Map<String, dynamic>?,
      url: json['url'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'access': access,
      'path': path,
      'name': name,
      'type': type,
      'size': size,
      'mime': mime,
      'meta': meta,
      'url': url,
    };
  }
}

class Product {
  int id;
  String name;
  double price;
  int subCategoryId;
  String subCategory;
  String description;
  ProductImage? image; 

  Product({
    required this.id,
    required this.name,
    required this.price,
    required this.subCategoryId,
    required this.subCategory,
    required this.description,
    this.image,
  });

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      id: json['id'] as int,
      name: json['name'] as String,
      price: (json['price'] as num).toDouble(),
      subCategoryId: json['subCategoryId'] as int,
      subCategory: json['subCategory'] as String,
      description: json['description'] as String? ?? "",
      image: json['image'] != null ? ProductImage.fromJson(json['image']) : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'price': price,
      'subCategoryId': subCategoryId,
      'subCategory': subCategory,
      'description': description,
      'url': image?.url ?? "",
    };
  }
}

// ==== lib/models/SubCategoryCard.dart ====
import 'package:flutter/material.dart';
import '../models/subcategory.dart';
import 'package:provider/provider.dart';
import '../controllers/subcategory_controller.dart';

class SubCategoryCard extends StatelessWidget {
  final SubCategory subCategory; 

  SubCategoryCard({required this.subCategory})
      : super(key: ValueKey(subCategory.id));

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text(subCategory.name), 
        subtitle: Text(
          'Categoria: ${subCategory.category.name}', 
          style: TextStyle(color: Colors.grey[600]),
        ),
        trailing: IconButton(
          icon: Icon(Icons.delete), 
          onPressed: () {
            Provider.of<SubCategoryController>(context, listen: false)
                .removeSubCategory(subCategory.id);
          },
        ),
      ),
    );
  }
}

// ==== lib/models/user.dart ====
// lib/models/user.dart
import 'role.dart';

// lib/models/user.dart
import 'role.dart';

class User {
  final int id;
  final String userName;
  final String? password; 
  final int roleId;
  final String role;

  User({
    required this.id,
    required this.userName,
    this.password, 
    required this.roleId,
    required this.role,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'] as int,
      userName: json['userName'] as String,
      password: json['password'] as String?, 
      roleId: json['roleId'] as int,
      role: json['role'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userName': userName,
      'password': password,
      'roleId': roleId,
      'role': role,
    };
  }
}

// ==== lib/models/subcategory.dart ====
import 'package:ecommerce_front/models/category.dart';

class SubCategory {
  final int id;
  final String name;
  final int categoryId;
  final String category;

  SubCategory({
    required this.id,
    required this.name,
    required this.categoryId,
    required this.category,
  });

  factory SubCategory.fromJson(Map<String, dynamic> json) {
    return SubCategory(
      id: json['id'] as int,
      name: json['name'] as String,
      categoryId: json['categoryId'] as int,
      category: json['category'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'categoryId': categoryId,
      'category': category,
    };
  }
}

// ==== lib/models/category.dart ====
// lib/models/category.dart
class Category {
  final int id;
  final String name;

  Category({required this.id, required this.name});

  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      id: json['id'],
      name: json['name'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
    };
  }
}


// ==== lib/models/role.dart ====
// lib/models/role.dart
import 'package:flutter/foundation.dart';

class Role {
 final int id;
 final String name;

 Role({required this.id, required this.name});

 factory Role.fromJson(Map<String, dynamic> json) {
   return Role(
     id: json['id'],
     name: json['name'],
   );
 }

 Map<String, dynamic> toJson() {
   return {
     'id': id,
     'name': name,
   };
 }
}


// ==== lib/models/cart_item.dart ====
import 'product.dart';

class CartItem {
  final Product product;
  int quantity;

  CartItem({required this.product, required this.quantity});
}

// ==== lib/screens/add_category_popup.dart ====
// lib/screens/add_category_popup.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/category_controller.dart';
import '../models/category.dart';

class AddCategoryPopup extends StatefulWidget {
  @override
  _AddCategoryPopupState createState() => _AddCategoryPopupState();
}

class _AddCategoryPopupState extends State<AddCategoryPopup> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Adicionar Categoria'),
      content: Form(
        key: _formKey,
        child: TextFormField(
          decoration: InputDecoration(labelText: 'Nome da Categoria'),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Informe o nome da categoria';
            }
            return null;
          },
          onSaved: (value) {
            _name = value!;
          },
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancelar'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        TextButton(
          child: Text('Adicionar'),
          onPressed: () {
            if (_formKey.currentState!.validate()) {
              _formKey.currentState!.save();
              final newCategory = Category(id: 0, name: _name);
              Provider.of<CategoryController>(context, listen: false)
                  .addCategory(newCategory);
              Navigator.of(context).pop();
            }
          },
        ),
      ],
    );
  }
}


// ==== lib/screens/user_list_screen.dart ====
// lib/screens/user_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/user_controller.dart';
import '../widgets/user_card.dart';
import 'add_user_popup.dart';

class UserListScreen extends StatelessWidget {
 @override
 Widget build(BuildContext context) {
   final controller = Provider.of<UserController>(context, listen: false);
   controller.loadUsers();

   return Stack(
     children: [
       Consumer<UserController>(
         builder: (context, controller, child) {
           if (controller.users.isEmpty) {
             return const Center(child: Text("Nenhum usu√°rio cadastrado"));
           }
           return ListView.builder(
             itemCount: controller.users.length,
             itemBuilder: (context, index) {
               return UserCard(user: controller.users[index]);
             },
           );
         },
       ),
       Positioned(
         bottom: 16,
         right: 16,
         child: FloatingActionButton(
           onPressed: () {
             showDialog(
               context: context,
               builder: (BuildContext context) {
                 return AddUserPopup();
               },
             );
           },
           child: Icon(Icons.add),
           backgroundColor: Colors.blue,
         ),
       ),
     ],
   );
 }
}



// ==== lib/screens/cart_screen.dart ====
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/cart_controller.dart';
import '../screens/order_screen.dart';

class CartScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final cartController = Provider.of<CartController>(context);
    final items = cartController.items;

    return Scaffold(
      appBar: AppBar(
        title: Text("Carrinho de Compras"),
      ),
      body: items.isEmpty
          ? Center(child: Text("Carrinho vazio"))
          : ListView.builder(
              itemCount: items.length,
              itemBuilder: (context, index) {
                final cartItem = items[index];
                return ListTile(
                  title: Text(cartItem.product.name),
                  subtitle: Text("Quantidade: ${cartItem.quantity}"),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.remove),
                        onPressed: () {
                          cartController.decreaseQuantity(cartItem.product.id);
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.add),
                        onPressed: () {
                          cartController.increaseQuantity(cartItem.product.id);
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () {
                          cartController.removeItem(cartItem.product.id);
                        },
                      ),
                    ],
                  ),
                );
              },
            ),
      bottomNavigationBar: items.isEmpty
          ? null
          : Container(
              padding: EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text("Total: \$${cartController.totalPrice.toStringAsFixed(2)}"),
                  SizedBox(height: 8),
                  ElevatedButton(
                    child: Text("Finalizar Pedido"),
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => OrderScreen()),
                      );
                    },
                  )
                ],
              ),
            ),
    );
  }
}

// ==== lib/screens/product_list_screen.dart ====
// lib/screens/product_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/product_controller.dart';
import '../controllers/auth_controller.dart';
import '../widgets/product_card.dart';
import 'cart_screen.dart';
import 'add_product_popup.dart';

class ProductListScreen extends StatefulWidget {
  /// Se [subcategoryId] for nulo, carrega todos os produtos;
  /// caso contr√°rio, carrega somente os produtos que possuem este ID.
  final int? subcategoryId;

  const ProductListScreen({Key? key, this.subcategoryId}) : super(key: key);

  @override
  _ProductListScreenState createState() => _ProductListScreenState();
}

class _ProductListScreenState extends State<ProductListScreen> {
  @override
  void initState() {
    super.initState();
    final productController =
        Provider.of<ProductController>(context, listen: false);
    // Se for informado um subcategoryId, filtra os produtos, sen√£o, carrega todos
    if (widget.subcategoryId != null) {
      productController.loadProductsBySubcategory(widget.subcategoryId!);
    } else {
      productController.loadProducts();
    }
  }

  @override
  Widget build(BuildContext context) {
    final authController = Provider.of<AuthController>(context);
    final userRole = authController.user?.role ?? "Client";

    return Scaffold(
      appBar: AppBar(
        title: Text("Produtos Dispon√≠veis"),
      ),
      body: Consumer<ProductController>(
        builder: (context, controller, child) {
          if (controller.products.isEmpty) {
            return Center(child: Text("Nenhum produto cadastrado"));
          }
          return GridView.builder(
            padding: EdgeInsets.all(8.0),
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount:
                  MediaQuery.of(context).size.width > 600 ? 3 : 2,
              crossAxisSpacing: 8.0,
              mainAxisSpacing: 8.0,
              childAspectRatio: 0.75,
            ),
            itemCount: controller.products.length,
            itemBuilder: (context, index) {
              final product = controller.products[index];
              return ProductCard(product: product);
            },
          );
        },
      ),
      floatingActionButton: userRole == "Client"
          ? FloatingActionButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => CartScreen()),
                );
              },
              child: Icon(Icons.shopping_cart),
              backgroundColor: Colors.green,
            )
          : FloatingActionButton(
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (BuildContext context) => AddProductPopup(),
                );
              },
              child: Icon(Icons.add),
              backgroundColor: Colors.blue,
            ),
    );
  }
}

// ==== lib/screens/category_list_screen.dart ====
// lib/screens/category_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/category_controller.dart';
import 'add_category_popup.dart';

class CategoryListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final controller = Provider.of<CategoryController>(context, listen: false);
    controller.loadCategories();

    return Scaffold(
      appBar: AppBar(title: Text("Lista de Categorias")),
      body: Consumer<CategoryController>(
        builder: (context, controller, child) {
          if (controller.categories.isEmpty) {
            return const Center(child: Text("Nenhuma categoria cadastrada"));
          }
          return ListView.builder(
            itemCount: controller.categories.length,
            itemBuilder: (context, index) {
              final category = controller.categories[index];
              return ListTile(
                title: Text(category.name),
                trailing: IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () {
                    controller.removeCategory(category.id);
                  },
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AddCategoryPopup();
            },
          );
        },
        child: Icon(Icons.add),
        backgroundColor: Colors.blue,
      ),
    );
  }
}


// ==== lib/screens/product_details_screen.dart ====
// lib/screens/product_details_screen.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:ecommerce_front/utils/app_storage.dart';
import 'package:ecommerce_front/models/product.dart';
import 'package:provider/provider.dart';
import '../controllers/cart_controller.dart';

class ProductDetailsScreen extends StatefulWidget {
  final int productId;

  const ProductDetailsScreen({Key? key, required this.productId}) : super(key: key);

  @override
  _ProductDetailsScreenState createState() => _ProductDetailsScreenState();
}

class _ProductDetailsScreenState extends State<ProductDetailsScreen> {
  late Future<Product> _futureProduct;

  @override
  void initState() {
    super.initState();
    _futureProduct = fetchProductDetails(widget.productId);
  }

  Future<Product> fetchProductDetails(int id) async {
    final token = AppStorage.instance.token;
    final url = Uri.parse('https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin/product_repository/$id');
    final response = await http.get(url, headers: {
      "Content-Type": "application/json",
      "Authorization": "Bearer $token",
    });
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return Product.fromJson(data);
    } else {
      throw Exception("Erro ao buscar detalhes do produto");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Detalhes do Produto"),
      ),
      body: FutureBuilder<Product>(
        future: _futureProduct,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Erro: ${snapshot.error}"));
          } else if (snapshot.hasData) {
            final product = snapshot.data!;
            return SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  product.image?.url != null && product.image!.url.isNotEmpty
                      ? Image.network(
                          product.image!.url,
                          fit: BoxFit.cover,
                          width: double.infinity,
                          height: 300,
                        )
                      : Container(
                          width: double.infinity,
                          height: 300,
                          color: Colors.grey,
                          child: Icon(Icons.image, size: 100),
                        ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text(product.name,
                        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Text("\$${product.price.toStringAsFixed(2)}",
                        style: TextStyle(fontSize: 20, color: Colors.green)),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text("Subcategoria: ${product.subCategory}", style: TextStyle(fontSize: 16)),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text("Descri√ß√£o: ${product.description}", style: TextStyle(fontSize: 16)),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Provider.of<CartController>(context, listen: false)
                            .addProductToCart(product, 1);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text("Produto adicionado ao carrinho")),
                        );
                      },
                      child: Text("Adicionar ao Carrinho"),
                    ),
                  ),
                ],
              ),
            );
          }
          return Container();
        },
      ),
    );
  }
}

// ==== lib/screens/subcategory_list_screen.dart ====
// lib/screens/subcategory_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/subcategory_controller.dart';
import 'add_subcategory_popup.dart';
import '../widgets/subcategory_card.dart';

class SubCategoryListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final controller = Provider.of<SubCategoryController>(context, listen: false);
    controller.loadSubCategories();

    return Scaffold(
      appBar: AppBar(title: Text("Lista de Subcategorias")),
      body: Consumer<SubCategoryController>(
        builder: (context, controller, child) {
          if (controller.subCategories.isEmpty) {
            return const Center(child: Text("Nenhuma subcategoria cadastrada"));
          }
          return ListView.builder(
            itemCount: controller.subCategories.length,
            itemBuilder: (context, index) {
              final subCategory = controller.subCategories[index];
              return SubCategoryCard(subCategory: subCategory);
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AddSubCategoryPopup();
            },
          );
        },
        child: Icon(Icons.add),
        backgroundColor: Colors.blue,
      ),
    );
  }
}


// ==== lib/screens/add_product_popup.dart ====
// lib/screens/add_product_popup.dart
import 'dart:typed_data';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/product_controller.dart';
import '../controllers/subcategory_controller.dart';
import '../models/product.dart';
import '../models/subcategory.dart';

class AddProductPopup extends StatefulWidget {
  @override
  _AddProductPopupState createState() => _AddProductPopupState();
}

class _AddProductPopupState extends State<AddProductPopup> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  double _price = 0.0;
  String _description = '';
  SubCategory? _selectedSubCategory;

  Uint8List? _pickedFileBytes;
  String? _pickedFileName;
  bool _isUploading = false;

  Future<void> _pickImage() async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.image,
      withData: true,
    );
    if (result != null && result.files.isNotEmpty) {
      setState(() {
        _pickedFileBytes = result.files.first.bytes;
        _pickedFileName = result.files.first.name;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final subCategories = Provider.of<SubCategoryController>(context).subCategories;
    return AlertDialog(
      title: Text('Adicionar Produto'),
      content: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                decoration: InputDecoration(labelText: 'Nome do Produto'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Informe o nome do produto';
                  }
                  return null;
                },
                onSaved: (value) {
                  _name = value!;
                },
              ),
              TextFormField(
                decoration: InputDecoration(labelText: 'Pre√ßo do Produto'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || double.tryParse(value) == null) {
                    return 'Informe um pre√ßo v√°lido';
                  }
                  return null;
                },
                onSaved: (value) {
                  _price = double.parse(value!);
                },
              ),
              TextFormField(
                decoration: InputDecoration(labelText: 'Descri√ß√£o'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Informe a descri√ß√£o';
                  }
                  return null;
                },
                onSaved: (value) {
                  _description = value!;
                },
              ),
              SizedBox(height: 8),
              Row(
                children: [
                  ElevatedButton(
                    onPressed: _pickImage,
                    child: Text("Selecionar Imagem"),
                  ),
                  SizedBox(width: 8),
                  _pickedFileName != null
                      ? Expanded(child: Text(_pickedFileName!))
                      : Text("Nenhuma imagem selecionada"),
                ],
              ),
              if (_isUploading) CircularProgressIndicator(),
              if (_pickedFileBytes != null)
                Container(
                  margin: EdgeInsets.only(top: 8),
                  width: 100,
                  height: 100,
                  child: Image.memory(_pickedFileBytes!, fit: BoxFit.cover),
                ),
              DropdownButtonFormField<SubCategory>(
                decoration: InputDecoration(labelText: 'Subcategoria'),
                items: subCategories.map((subCategory) {
                  return DropdownMenuItem<SubCategory>(
                    value: subCategory,
                    child: Text(subCategory.name),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedSubCategory = value;
                  });
                },
                validator: (value) {
                  if (value == null) {
                    return 'Selecione uma subcategoria';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancelar'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        TextButton(
          child: Text('Adicionar'),
          onPressed: () async {
            if (_formKey.currentState!.validate()) {
              if (_pickedFileBytes == null || _pickedFileName == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("Selecione uma imagem para o produto.")),
                );
                return;
              }
              _formKey.currentState!.save();
              final newProduct = Product(
                id: 0,
                name: _name,
                price: _price,
                subCategoryId: _selectedSubCategory!.id,
                subCategory: _selectedSubCategory!.name,
                description: _description,
                image: null, 
              );
              await Provider.of<ProductController>(context, listen: false)
                  .addProductWithFile(newProduct, fileBytes: _pickedFileBytes, fileName: _pickedFileName);
              Navigator.of(context).pop();
            }
          },
        ),
      ],
    );
  }
}

// ==== lib/screens/role_list_screen.dart ====
// lib/screens/role_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/role_controller.dart';
import '../widgets/role_card.dart';
import 'add_role_popup.dart';

class RoleListScreen extends StatelessWidget {
 @override
 Widget build(BuildContext context) {
   final controller = Provider.of<RoleController>(context, listen: false);
   controller.loadRoles();

   return Stack(
     children: [
       Consumer<RoleController>(
         builder: (context, controller, child) {
           if (controller.roles.isEmpty) {
             return const Center(child: Text("Nenhum Perfil cadastrado"));
           }
           return ListView.builder(
             itemCount: controller.roles.length,
             itemBuilder: (context, index) {
               return RoleCard(role: controller.roles[index]);
             },
           );
         },
       ),
       Positioned(
         bottom: 16,
         right: 16,
         child: FloatingActionButton(
           onPressed: () {
             showDialog(
               context: context,
               builder: (BuildContext context) {
                 return AddRolePopup();
               },
             );
           },
           child: Icon(Icons.add),
           backgroundColor: Colors.blue,
         ),
       ),
     ],
   );
 }
}

// ==== lib/screens/login_screen.dart ====
//lib/screens/login_screen.dart
import 'package:ecommerce_front/screens/product_list_screen.dart';
import 'package:ecommerce_front/widgets/app_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/login_controller.dart';
import '../controllers/auth_controller.dart';

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final loginController = Provider.of<LoginController>(context, listen: false);

    return Scaffold(
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage("assets/images/background.webp"),
                fit: BoxFit.cover,
              ),
            ),
          ),
          Center(
            child: Container(
              width: 350,
              padding: const EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.95),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Image.asset("assets/images/logo.png", height: 60),
                    SizedBox(height: 16),
                    Text(
                      "Login",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 16),
                    TextFormField(
                      controller: _usernameController,
                      style: TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        labelText: "Usu√°rio",
                        prefixIcon: Icon(Icons.person, color: Colors.white),
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Por favor, insira o usu√°rio";
                        }
                        return null;
                      },
                    ),
                    SizedBox(height: 16),
                    TextFormField(
                      controller: _passwordController,
                      obscureText: true,
                      style: TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        labelText: "Senha",
                        prefixIcon: Icon(Icons.lock, color: Colors.white),
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Por favor, insira a senha";
                        }
                        return null;
                      },
                    ),
                    SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: () async {
                        if (_formKey.currentState!.validate()) {
                          final success = await loginController.login(
                            _usernameController.text,
                            _passwordController.text,
                          );
                          if (success) {
                            await Provider.of<AuthController>(context, listen: false)
                                .fetchUserData();
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text("Login realizado com sucesso!")),
                            );
                            Navigator.pushReplacement(
                              context,
                              MaterialPageRoute(
                                builder: (context) => AppScaffold(
                                  bodyContent: ProductListScreen(),
                                ),
                              ),
                            );
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text("Credenciais inv√°lidas!")),
                            );
                          }
                        }
                      },
                      child: Text("Entrar"),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// ==== lib/screens/add_user_popup.dart ====
// lib/screens/add_user_popup.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/user_controller.dart';
import '../controllers/role_controller.dart';
import '../models/user.dart';
import '../models/role.dart';

class AddUserPopup extends StatefulWidget {
  @override
  _AddUserPopupState createState() => _AddUserPopupState();
}

class _AddUserPopupState extends State<AddUserPopup> {
  final _formKey = GlobalKey<FormState>();
  String _userName = '';
  String _password = '';
  Role? _selectedRole;

  @override
  void initState() {
    super.initState();
    Provider.of<RoleController>(context, listen: false).loadRoles();
  }

  @override
  Widget build(BuildContext context) {
    final roles = Provider.of<RoleController>(context).roles;

    return AlertDialog(
      title: Text('Adicionar Usu√°rio'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              decoration: InputDecoration(labelText: 'Nome de Usu√°rio'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Informe o nome de usu√°rio';
                }
                return null;
              },
              onSaved: (value) {
                _userName = value!;
              },
            ),
            TextFormField(
              decoration: InputDecoration(labelText: 'Senha'),
              obscureText: true,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Informe a senha';
                }
                return null;
              },
              onSaved: (value) {
                _password = value!;
              },
            ),
            DropdownButtonFormField<Role>(
              decoration: InputDecoration(labelText: 'Perfil'),
              items: roles.map((role) {
                return DropdownMenuItem<Role>(
                  value: role,
                  child: Text(role.name),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _selectedRole = value;
                });
              },
              validator: (value) {
                if (value == null) {
                  return 'Selecione um Perfil';
                }
                return null;
              },
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancelar'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        TextButton(
          child: Text('Adicionar'),
          onPressed: () {
            if (_formKey.currentState!.validate()) {
              _formKey.currentState!.save();
              final newUser = User(
                id: 0,
                userName: _userName,
                password: _password,
                roleId: _selectedRole!.id,
                role: _selectedRole!.name, 
              );
              Provider.of<UserController>(context, listen: false)
                  .addUser(newUser);
              Navigator.of(context).pop();
            }
          },
        ),
      ],
    );
  }
}

// ==== lib/screens/add_role_popup.dart ====
// lib/screens/add_role_popup.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/role_controller.dart';
import '../models/role.dart';

class AddRolePopup extends StatefulWidget {
 @override
 _AddRolePopupState createState() => _AddRolePopupState();
}

class _AddRolePopupState extends State<AddRolePopup> {
 final _formKey = GlobalKey<FormState>();
 String _name = '';

 @override
 Widget build(BuildContext context) {
   return AlertDialog(
     title: Text('Adicionar Perfil'),
     content: Form(
       key: _formKey,
       child: Column(
         mainAxisSize: MainAxisSize.min,
         children: [
           TextFormField(
             decoration: InputDecoration(labelText: 'Nome do Perfil'),
             validator: (value) {
               if (value == null || value.isEmpty) {
                 return 'Informe o nome do Perfil';
               }
               return null;
             },
             onSaved: (value) {
               _name = value!;
             },
           ),
         ],
       ),
     ),
     actions: [
       TextButton(
         child: Text('Cancelar'),
         onPressed: () {
           Navigator.of(context).pop();
         },
       ),
       TextButton(
         child: Text('Adicionar'),
         onPressed: () {
           if (_formKey.currentState!.validate()) {
             _formKey.currentState!.save();
             final newRole = Role(
               id: 0,
               name: _name,
             );
             Provider.of<RoleController>(context, listen: false)
                 .addRole(newRole);
             Navigator.of(context).pop();
           }
         },
       ),
     ],
   );
 }
}

// ==== lib/screens/add_subcategory_popup.dart ====
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/subcategory_controller.dart';
import '../controllers/category_controller.dart';
import '../models/subcategory.dart';
import '../models/category.dart';

class AddSubCategoryPopup extends StatefulWidget {
  @override
  _AddSubCategoryPopupState createState() => _AddSubCategoryPopupState();
}

class _AddSubCategoryPopupState extends State<AddSubCategoryPopup> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  Category? _selectedCategory;

  @override
  void initState() {
    super.initState();
    Provider.of<CategoryController>(context, listen: false).loadCategories();
  }

  @override
  Widget build(BuildContext context) {
    final categories = Provider.of<CategoryController>(context).categories;

    return AlertDialog(
      title: Text('Adicionar Subcategoria'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              decoration: InputDecoration(labelText: 'Nome da Subcategoria'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Informe o nome da subcategoria';
                }
                return null;
              },
              onSaved: (value) {
                _name = value!;
              },
            ),
            DropdownButtonFormField<Category>(
              decoration: InputDecoration(labelText: 'Categoria'),
              items: categories.map((category) {
                return DropdownMenuItem<Category>(
                  value: category,
                  child: Text(category.name),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _selectedCategory = value;
                });
              },
              validator: (value) {
                if (value == null) {
                  return 'Selecione uma categoria';
                }
                return null;
              },
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancelar'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        TextButton(
          child: Text('Adicionar'),
          onPressed: () {
            if (_formKey.currentState!.validate()) {
              _formKey.currentState!.save();
              final newSubCategory = SubCategory(
                id: 0,
                name: _name,
                categoryId: _selectedCategory!.id,
                category: _selectedCategory!.name,
              );
              Provider.of<SubCategoryController>(context, listen: false)
                  .addSubCategory(newSubCategory);
              Navigator.of(context).pop();
            }
          },
        ),
      ],
    );
  }
}

// ==== lib/screens/order_screen.dart ====
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/cart_controller.dart';

class OrderScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final cartController = Provider.of<CartController>(context);
    final total = cartController.totalPrice;

    return Scaffold(
      appBar: AppBar(
        title: Text("Finalizar Pedido"),
      ),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            Text("Total do Pedido: \$${total.toStringAsFixed(2)}"),
            SizedBox(height: 16),
            ElevatedButton(
              child: Text("Confirmar Pedido"),
              onPressed: () {
                cartController.clearCart();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("Pedido realizado com sucesso!")),
                );
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}

// ==== lib/controllers/role_controller.dart ====
// lib/controllers/role_controller.dart
import 'package:flutter/foundation.dart';
import '../models/role.dart';
import '../services/role_service.dart';

class RoleController extends ChangeNotifier {
  final RoleService _service = RoleService();
  List<Role> _roles = [];

  List<Role> get roles => _roles;

  Future<void> loadRoles() async {
    try {
      _roles = await _service.getRoles();
      notifyListeners();
    } catch (e) {
      print('Error loading roles: $e');
    }
  }

  Future<void> addRole(Role role) async {
    try {
      final addedRole = await _service.addRole(role);
      _roles.add(addedRole);
      notifyListeners();
    } catch (e) {
      print('Error adding role: $e');
    }
  }

  Future<void> removeRole(int id) async {
    try {
      await _service.removeRole(id);
      _roles.removeWhere((role) => role.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting role: $e');
    }
  }
}

// ==== lib/controllers/cart_controller.dart ====
import 'package:flutter/material.dart';
import '../models/cart_item.dart';
import '../models/product.dart';

class CartController extends ChangeNotifier {
  List<CartItem> _items = [];

  List<CartItem> get items => _items;

  void addProductToCart(Product product, int quantity) {
    final index = _items.indexWhere((item) => item.product.id == product.id);
    if (index >= 0) {
      _items[index].quantity += quantity;
    } else {
      _items.add(CartItem(product: product, quantity: quantity));
    }
    notifyListeners();
  }

  void increaseQuantity(int productId) {
    final index = _items.indexWhere((item) => item.product.id == productId);
    if (index >= 0) {
      _items[index].quantity++;
      notifyListeners();
    }
  }

  void decreaseQuantity(int productId) {
    final index = _items.indexWhere((item) => item.product.id == productId);
    if (index >= 0) {
      if (_items[index].quantity > 1) {
        _items[index].quantity--;
      } else {
        _items.removeAt(index);
      }
      notifyListeners();
    }
  }

  void removeItem(int productId) {
    _items.removeWhere((item) => item.product.id == productId);
    notifyListeners();
  }

  void clearCart() {
    _items.clear();
    notifyListeners();
  }

  double get totalPrice {
    double total = 0;
    for (var item in _items) {
      total += item.product.price * item.quantity;
    }
    return total;
  }
}

// ==== lib/controllers/login_controller.dart ====
//lib/controllers/login_controller.dart
import 'package:flutter/material.dart';
import '../services/login_service.dart';

class LoginController extends ChangeNotifier {
  final LoginService _service = LoginService();

  Future<bool> login(String username, String password) async {
    try {
      return await _service.authenticate(username, password);
    } catch (e) {
      print("Erro no login: $e");
      return false;
    }
  }
}

// ==== lib/controllers/category_controller.dart ====
// lib/controllers/category_controller.dart
import 'package:flutter/material.dart';
import '../models/category.dart';
import '../services/category_service.dart';

class CategoryController extends ChangeNotifier {
  final CategoryService _service = CategoryService();
  List<Category> _categories = [];

  List<Category> get categories => _categories;

  Future<void> loadCategories() async {
    try {
      _categories = await _service.getCategories();
      notifyListeners();
    } catch (e) {
      print('Error loading categories: $e');
    }
  }

  Future<void> addCategory(Category category) async {
    try {
      final addedCategory = await _service.addCategory(category);
      _categories.add(addedCategory);
      notifyListeners();
    } catch (e) {
      print('Error adding category: $e');
    }
  }

  Future<void> removeCategory(int id) async {
    try {
      await _service.removeCategory(id);
      _categories.removeWhere((category) => category.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting category: $e');
    }
  }
}


// ==== lib/controllers/subcategory_controller.dart ====
import 'package:flutter/material.dart';
import '../models/subcategory.dart';
import '../services/subcategory_service.dart';

class SubCategoryController extends ChangeNotifier {
  final SubCategoryService _service = SubCategoryService();
  List<SubCategory> _subCategories = [];

  List<SubCategory> get subCategories => _subCategories;

  Future<void> loadSubCategories() async {
    try {
      _subCategories = await _service.getSubCategories();
      notifyListeners();
    } catch (e) {
      print('Error loading subcategories: $e');
    }
  }

  /// M√©todo para uso com FutureBuilder
  Future<List<SubCategory>> fetchSubCategories() async {
    await loadSubCategories();
    return subCategories;
  }

  Future<void> addSubCategory(SubCategory subCategory) async {
    try {
      final addedSubCategory = await _service.addSubCategory(subCategory);
      _subCategories.add(addedSubCategory);
      notifyListeners();
    } catch (e) {
      print('Error adding subcategory: $e');
    }
  }

  Future<void> removeSubCategory(int id) async {
    try {
      await _service.removeSubCategory(id);
      _subCategories.removeWhere((subCategory) => subCategory.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting subcategory: $e');
    }
  }
}

// ==== lib/controllers/product_controller.dart ====
// lib/controllers/product_controller.dart
import 'dart:typed_data';
import 'package:flutter/material.dart';
import '../models/product.dart';
import '../services/product_service.dart';

class ProductController extends ChangeNotifier {
  final ProductService _service = ProductService();
  List<Product> _products = [];

  List<Product> get products => _products;

  Future<void> loadProducts() async {
    try {
      _products = await _service.getProducts();
      notifyListeners();
    } catch (e) {
      print('Error loading products: $e');
    }
  }

  // M√©todo para filtrar os produtos pela subcategoria (filtragem no cliente)
  Future<void> loadProductsBySubcategory(int subcategoryId) async {
    try {
      // Busca todos os produtos
      List<Product> allProducts = await _service.getProducts();
      // Filtra os produtos cujo subCategoryId seja igual ao informado
      _products = allProducts.where((p) => p.subCategoryId == subcategoryId).toList();
      notifyListeners();
    } catch (e) {
      print('Error loading products by subcategory: $e');
    }
  }

  Future<void> addProductWithFile(Product product, {Uint8List? fileBytes, String? fileName}) async {
    try {
      final addedProduct = await _service.createProduct(product, fileBytes: fileBytes, fileName: fileName);
      _products.add(addedProduct);
      notifyListeners();
    } catch (e) {
      print('Error adding product: $e');
    }
  }

  Future<void> removeProduct(int id) async {
    try {
      await _service.removeProduct(id);
      _products.removeWhere((product) => product.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting product: $e');
    }
  }
}

// ==== lib/controllers/user_controller.dart ====
// controllers/user_controller.dart

import 'package:flutter/foundation.dart';
import '../models/user.dart';
import '../services/user_service.dart';

class UserController extends ChangeNotifier {
 final UserService _service = UserService();
 List<User> _users = [];

 List<User> get users => _users;

 Future<void> loadUsers() async {
   try {
     _users = await _service.getUsers();
     notifyListeners();
   } catch (e) {
     print('Error loading users: $e');
   }
 }

 Future<void> addUser(User user) async {
   try {
     final addedUser = await _service.addUser(user);
     _users.add(addedUser);
     notifyListeners();
   } catch (e) {
     print('Error adding user: $e');
   }
 }

 Future<void> removeUser(int id) async {
   try {
     await _service.removeUser(id);
     _users.removeWhere((user) => user.id == id);
     notifyListeners();
   } catch (e) {
     print('Error deleting user: $e');
   }
 }
}

// ==== lib/controllers/auth_controller.dart ====
import 'package:flutter/material.dart';
import '../models/user.dart';
import '../services/auth_service.dart';

class AuthController extends ChangeNotifier {
  User? _user;
  User? get user => _user;

  Future<void> fetchUserData() async {
    try {
      _user = await AuthService().getMe();
      notifyListeners();
    } catch (e) {
      print("Erro ao buscar dados do usu√°rio: $e");
    }
  }

  void clearUser() {
    _user = null;
    notifyListeners();
  }
}

// ==== lib/services/subcategory_service.dart ====
// lib/services/subcategory_service.dart
import '../models/subcategory.dart';
import '../repositories/subcategory_repository.dart';

class SubCategoryService {
  final SubCategoryRepository _repository = SubCategoryRepository();

  Future<List<SubCategory>> getSubCategories() {
    return _repository.fetchSubCategories();
  }

  Future<SubCategory> addSubCategory(SubCategory subCategory) {
    return _repository.createSubCategory(subCategory);
  }

  Future<void> removeSubCategory(int id) {
    return _repository.deleteSubCategory(id);
  }
}


// ==== lib/services/login_service.dart ====
//lib/services/login_service.dart
import '../repositories/login_repository.dart';

class LoginService {
  final LoginRepository _repository = LoginRepository();

  Future<bool> authenticate(String username, String password) async {
    return await _repository.login(username, password);
  }
}

// ==== lib/services/product_service.dart ====
import 'dart:typed_data'; // Import necess√°rio para Uint8List
import '../models/product.dart';
import '../repositories/product_repository.dart';

class ProductService {
  final ProductRepository _repository = ProductRepository();

  Future<List<Product>> getProducts() {
    return _repository.fetchProducts();
  }

  Future<Product> createProduct(Product product, {Uint8List? fileBytes, String? fileName}) async {
    return await _repository.createProduct(product, fileBytes: fileBytes, fileName: fileName);
  }

  Future<void> removeProduct(int id) {
    return _repository.deleteProduct(id);
  }
}

// ==== lib/services/auth_service.dart ====
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../utils/app_storage.dart';
import '../models/user.dart';

class AuthService {
  final String _baseUrl = "https://x8ki-letl-twmt.n7.xano.io/api:tPOO5Nin";

  Future<User> getMe() async {
    final token = AppStorage.instance.token;
    if (token == null) {
      throw Exception("Token n√£o encontrado");
    }
    final url = Uri.parse('$_baseUrl/auth/me');
    final response = await http.get(url, headers: {
      "Content-Type": "application/json",
      "Authorization": "Bearer $token",
    });

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return User.fromJson(data);
    }
    throw Exception("Erro ao buscar dados do usu√°rio");
  }
}

// ==== lib/services/category_service.dart ====
// lib/services/category_service.dart
import '../models/category.dart';
import '../repositories/category_repository.dart';

class CategoryService {
  final CategoryRepository _repository = CategoryRepository();

  Future<List<Category>> getCategories() {
    return _repository.fetchCategories();
  }

  Future<Category> addCategory(Category category) {
    return _repository.createCategory(category);
  }

  Future<void> removeCategory(int id) {
    return _repository.deleteCategory(id);
  }
}


// ==== lib/services/user_service.dart ====
// lib/services/user_service.dart
import '../models/user.dart';
import '../repositories/user_repository.dart';

class UserService {
 final UserRepository _repository = UserRepository();

 Future<List<User>> getUsers() {
   return _repository.fetchUsers();
 }

 Future<User> addUser(User user) {
   return _repository.createUser(user);
 }

 Future<void> removeUser(int id) {
   return _repository.deleteUser(id);
 }
}

// ==== lib/services/role_service.dart ====
// lib/services/role_service.dart
import '../models/role.dart';
import '../repositories/role_repository.dart';

class RoleService {
 final RoleRepository _repository = RoleRepository();

 Future<List<Role>> getRoles() {
   return _repository.fetchRoles();
 }

 Future<Role> addRole(Role role) {
   return _repository.createRole(role);
 }

 Future<void> removeRole(int id) {
   return _repository.deleteRole(id);
 }
}

// ==== lib/widgets/role_card.dart ====
// lib/widgets/role_card.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/role_controller.dart';
import '../models/role.dart';

class RoleCard extends StatelessWidget {
  final Role role;

  RoleCard({required this.role}) : super(key: ValueKey(role.id));

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text(role.name),
        trailing: IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            Provider.of<RoleController>(context, listen: false)
                .removeRole(role.id);
          },
        ),
      ),
    );
  }
}

// ==== lib/widgets/subcategory_card.dart ====
// lib/widgets/subcategory_card.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/subcategory_controller.dart';
import '../models/subcategory.dart';

class SubCategoryCard extends StatelessWidget {
  final SubCategory subCategory;

  SubCategoryCard({required this.subCategory}) : super(key: ValueKey(subCategory.id));

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text(subCategory.name),
        subtitle: Text(
          'Categoria: ${subCategory.category}',
          style: TextStyle(color: Colors.grey[600]),
        ),
        trailing: IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            Provider.of<SubCategoryController>(context, listen: false)
                .removeSubCategory(subCategory.id);
          },
        ),
      ),
    );
  }
}


// ==== lib/widgets/product_card.dart ====
// lib/widgets/product_card.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/product.dart';
import '../controllers/product_controller.dart';
import '../controllers/auth_controller.dart';
import '../screens/product_details_screen.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  ProductCard({required this.product}) : super(key: ValueKey(product.id));

  @override
  Widget build(BuildContext context) {
    final authController = Provider.of<AuthController>(context);
    bool isAdmin = authController.user?.role == "Admin";

    return Card(
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ProductDetailsScreen(productId: product.id),
            ),
          );
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            product.image?.url != null && product.image!.url.isNotEmpty
                ? Image.network(
                    product.image!.url,
                    fit: BoxFit.cover,
                    width: double.infinity,
                    height: 120,
                  )
                : Container(
                    width: double.infinity,
                    height: 120,
                    color: Colors.grey,
                    child: Icon(Icons.image, size: 60),
                  ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(product.name,
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Text("\$${product.price.toStringAsFixed(2)}"),
            ),
            if (isAdmin)
              Align(
                alignment: Alignment.centerRight,
                child: IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () {
                    Provider.of<ProductController>(context, listen: false)
                        .removeProduct(product.id);
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }
}

// ==== lib/widgets/app_scaffold.dart ====
// lib/widgets/app_scaffold.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:get_storage/get_storage.dart';

import 'package:ecommerce_front/screens/login_screen.dart';
import 'package:ecommerce_front/screens/category_list_screen.dart';
import 'package:ecommerce_front/screens/product_list_screen.dart';
import 'package:ecommerce_front/screens/subcategory_list_screen.dart';
import 'package:ecommerce_front/screens/user_list_screen.dart';
import 'package:ecommerce_front/screens/role_list_screen.dart';
import '../screens/cart_screen.dart';
import '../screens/order_screen.dart';
import 'package:ecommerce_front/controllers/auth_controller.dart';
import 'package:ecommerce_front/controllers/subcategory_controller.dart';
import 'package:ecommerce_front/models/subcategory.dart';

class AppScaffold extends StatelessWidget {
  final Widget bodyContent;

  AppScaffold({required this.bodyContent});

  @override
  Widget build(BuildContext context) {
    final storage = GetStorage();
    final authController = Provider.of<AuthController>(context);
    final userName = authController.user?.userName ?? "Usu√°rio";
    final userRole = authController.user?.role ?? "Admin";

    return Scaffold(
      // Para usu√°rios Client, definimos um √≠cone de filtro no canto superior esquerdo;
      // para Admin, usamos o √≠cone padr√£o do Drawer (hamburger icon)
      appBar: AppBar(
        // Se o usu√°rio for Client, usamos o √≠cone de filtro; caso contr√°rio, deixamos nulo (o padr√£o √© o √≠cone do Drawer)
        leading: userRole == "Client"
            ? IconButton(
                icon: Icon(Icons.filter_list),
                onPressed: () async {
                  // Busca as subcategorias (pode ser um FutureBuilder ou await, conforme preferir)
                  final subCategories = await Provider.of<SubCategoryController>(context, listen: false).fetchSubCategories();
                  // Exibe um modal bottom sheet com a lista de subcategorias
                  showModalBottomSheet(
                    context: context,
                    builder: (context) {
                      return ListView(
                        children: subCategories.map((subcat) {
                          return ListTile(
                            title: Text(subcat.name),
                            onTap: () {
                              Navigator.pop(context); // fecha o modal
                              Navigator.pushReplacement(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => AppScaffold(
                                    // Passa o subcategoryId para filtrar os produtos
                                    bodyContent: ProductListScreen(subcategoryId: subcat.id),
                                  ),
                                ),
                              );
                            },
                          );
                        }).toList(),
                      );
                    },
                  );
                },
              )
            : null,
        title: Text(userRole == "Admin" ? "Admin Panel" : "Client Panel"),
        actions: [
          Row(
            children: [
              CircleAvatar(
                backgroundImage: AssetImage("assets/images/avatar.png"),
              ),
              SizedBox(width: 8),
              PopupMenuButton<String>(
                onSelected: (value) {
                  if (value == 'logout') {
                    storage.remove('authToken');
                    Provider.of<AuthController>(context, listen: false).clearUser();
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(builder: (context) => LoginScreen()),
                    );
                  }
                },
                itemBuilder: (BuildContext context) {
                  return [
                    PopupMenuItem<String>(
                      value: 'logout',
                      child: Text('Logout'),
                    ),
                  ];
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: Text(userName),
                ),
              ),
            ],
          ),
        ],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              child: Text(
                'Menu',
                style: TextStyle(color: Colors.white, fontSize: 24),
              ),
              decoration: BoxDecoration(color: Colors.blue),
            ),
            // Menu para usu√°rios Admin (itens est√°ticos)
            if (userRole == "Admin") ...[
              ListTile(
                title: Text('Produtos'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: ProductListScreen()),
                    ),
                  );
                },
              ),
              ListTile(
                title: Text('Categorias'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: CategoryListScreen()),
                    ),
                  );
                },
              ),
              ListTile(
                title: Text('Subcategorias'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: SubCategoryListScreen()),
                    ),
                  );
                },
              ),
              ListTile(
                title: Text('Usu√°rios'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: UserListScreen()),
                    ),
                  );
                },
              ),
              ListTile(
                title: Text('Perfil'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: RoleListScreen()),
                    ),
                  );
                },
              ),
            ],
            // Menu para usu√°rios Client (itens est√°ticos complementares)
            if (userRole == "Client") ...[
              ListTile(
                title: Text('Carrinho'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: CartScreen()),
                    ),
                  );
                },
              ),
              ListTile(
                title: Text('Pedidos'),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AppScaffold(bodyContent: OrderScreen()),
                    ),
                  );
                },
              ),
            ],
          ],
        ),
      ),
      body: bodyContent,
    );
  }
}

// ==== lib/widgets/user_card.dart ====
// lib/widgets/user_card.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/user_controller.dart';
import '../models/user.dart';

class UserCard extends StatelessWidget {
  final User user;

  UserCard({required this.user}) : super(key: ValueKey(user.id));

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text(user.userName),
        subtitle: Text(user.role),
        trailing: IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            Provider.of<UserController>(context, listen: false)
                .removeUser(user.id);
          },
        ),
      ),
    );
  }
}

